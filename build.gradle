plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.ShadowNightSMP.plugin'
version = '1.1'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
    maven { url = "https://repo.dmulloy2.net/repository/public/" }
    maven { url = "https//hub.spigotmc.org/nexus/content/repositories/snapshots/" }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT"
    compileOnly "me.clip:placeholderapi:2.11.5"
    compileOnly "net.luckperms:api:5.4"
    compileOnly "com.comphenix.protocol:ProtocolLib:4.5.0"
    //implementation "org.javacord:javacord:3.8.0"
    implementation("net.dv8tion:JDA:5.0.0-beta.20")
}



jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")
    processResources.exclude("botToken")

    manifest {
        attributes "Main-Class": "org.shadownight.plugin.shadownight.ShadowNight"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}




def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}


